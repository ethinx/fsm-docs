apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: egress-gateway
spec: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: global-egress-gateway
  name: global-egress-gateway
  namespace: egress-gateway
---
apiVersion: v1
kind: Service
metadata:
  name: global-egress-gateway
  namespace: egress-gateway
  labels:
    app: global-egress-gateway
spec:
  ports:
    - port: 1080
      name: pipy-socks-port
      appProtocol: tcp
  selector:
    app: global-egress-gateway
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: global-egress-gateway-pjs
  namespace: egress-gateway
  labels:
    app: global-egress-gateway
data:
  pipy-sock.js: |
    // version: '2022.09.03'
    ((
      socksActiveConnectionGauge = new stats.Gauge('socks_active_connection', ['source_address', 'destination_address', 'destination_port']),
      socksTotalConnectionCounter = new stats.Counter('socks_total_connection', ['source_address', 'destination_address', 'destination_port']),
      socksSendBytesTotalCounter = new stats.Counter('socks_send_bytes_total', ['source_address', 'destination_address', 'destination_port']),
      socksReceiveBytesTotalCounter = new stats.Counter('socks_receive_bytes_total', ['source_address', 'destination_address', 'destination_port']),
      serverLiveGauge = (new stats.Gauge('sidecar_server_live')).increase(),
      logLogging = new logging.JSONLogger('access-logging').toFile('/dev/stdout').log,
      prometheusTarget = '127.0.0.1:6060'
    ) => pipy({
      _id: null,
      _host: null,
      _port: null,
      _sourceIP: null,
      _protocol: null,
      _logDataStruct: null
    })
    
      //
      // Socks5 server
      //
      .listen(1080)
      .onStart(
        () => (
          _host = null,
          _logDataStruct = {},
          _id = algo.uuid().substring(0, 18).replaceAll('-', ''),
          _logDataStruct['id'] = _id,
          _logDataStruct['start_time'] = (new Date()).toISOString(),
          _logDataStruct['source_address'] = _sourceIP = __inbound.remoteAddress,
          _logDataStruct['source_port'] = __inbound.remotePort,
          null
        )
      )
      .onEnd(
        () => (
          _host && socksActiveConnectionGauge.withLabels(_sourceIP, _host, _port).decrease(),
          _logDataStruct['end_time'] = (new Date()).toISOString(),
          logLogging(_logDataStruct)
        )
      )
      .acceptSOCKS(
        (host, port) => (
          _logDataStruct['destination_address'] = _host = host,
          _logDataStruct['destination_port'] = _port = port,
          socksActiveConnectionGauge.withLabels(_sourceIP, _host, _port).increase(),
          socksTotalConnectionCounter.withLabels(_sourceIP, _host, _port).increase(),
          true
        )
      )
      .to($ => $
        .onStart(
          () => new Data
        )
        .fork('logger-requests')
        .handleData(
          data => (
            socksSendBytesTotalCounter.withLabels(_sourceIP, _host, _port).increase(data.size)
          )
        )
        .connect(
          () => _host + ':' + _port
        )
        .handleData(
          data => (
            socksReceiveBytesTotalCounter.withLabels(_sourceIP, _host, _port).increase(data.size)
          )
        )
      )
    
      //
      // Logging HTTP requests
      //
      .pipeline('logger-requests')
      .onStart(
        () => (
          _protocol = undefined,
          new Data
        )
      )
      .detectProtocol(
        protocolName => _protocol = protocolName
      )
      .branch(
        () => _protocol === 'HTTP', $ => $
          .demuxHTTP().to($ => $
            .handleMessageStart(
              msg => (
                ((request) => (
                  request = {
                    connection_id: _logDataStruct.id,
                    request_time: (new Date()).toISOString(),
                    source_address: _logDataStruct['source_address'],
                    source_port: _logDataStruct['source_port'],
                    host: msg.head.headers.host,
                    path: msg.head.path,
                    method: msg.head.method
                  },
                  logLogging(request)
                ))()
              )
            )
          ),
        () => _protocol === 'TLS', $ => $
          .handleTLSClientHello(
            (hello) => (
              _logDataStruct['serverNames'] = hello.serverNames,
              _logDataStruct['protocolNames'] = hello.protocolNames
            )
          ),
        () => _protocol === '', $ => $
      )
      .dummy()
    
      //
      // Prometheus collects metrics
      //
      .listen(15010)
      .demuxHTTP()
      .to($ => $
        .handleMessageStart(
          msg => (
            (msg.head.path === '/stats/prometheus' && (msg.head.path = '/metrics')) || (msg.head.path = '/stats' + msg.head.path)
          )
        )
        .muxHTTP(() => prometheusTarget)
        .to($ => $
          .connect(() => prometheusTarget)
        )
      )
    
    )()
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pipy-global-egress-gateway
  namespace: egress-gateway
  labels:
    app: global-egress-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: global-egress-gateway
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: global-egress-gateway
      annotations:
        prometheus.io/path: '/stats/prometheus'
        prometheus.io/port: '15010'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: global-egress-gateway
      containers:
        - name: pipy
          image: flomesh/pipy:0.70.0-2
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 500m
              memory: 128M
            requests:
              cpu: 100m
              memory: 64M
          volumeMounts:
            - name: egress-gateway-pjs
              mountPath: "/pipy-sock.js"
              subPath: pipy-sock.js
              readOnly: true
          ports:
            - name: "pipy-socks-port"
              containerPort: 1080
            - name: "pipy-admin-port"
              containerPort: 6060
          command: [ 'pipy' ]
          args: [
            "/pipy-sock.js",
            "--log-level=error",
            "--admin-port=6060",
          ]
      volumes:
        - name: egress-gateway-pjs
          configMap:
            name: global-egress-gateway-pjs